"""
516 Hackers - Export Utilities
Data export and formatting functions
"""

import json
import csv
import pandas as pd
from datetime import datetime
import os

class ExportUtils516:
    def __init__(self, output_dir="outputs"):
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
    
    def export_json(self, data, filename_prefix):
        """Export data to JSON file"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{self.output_dir}/{filename_prefix}_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        return filename
    
    def export_csv(self, data, filename_prefix):
        """Export data to CSV file"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{self.output_dir}/{filename_prefix}_{timestamp}.csv"
        
        if isinstance(data, list) and data:
            with open(filename, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=data[0].keys())
                writer.writeheader()
                writer.writerows(data)
        elif isinstance(data, dict):
            df = pd.DataFrame([data])
            df.to_csv(filename, index=False)
        
        return filename
    
    def export_excel(self, data, filename_prefix, sheet_name="Data"):
        """Export data to Excel file"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{self.output_dir}/{filename_prefix}_{timestamp}.xlsx"
        
        if isinstance(data, list):
            df = pd.DataFrame(data)
        else:
            df = pd.DataFrame([data])
        
        df.to_excel(filename, sheet_name=sheet_name, index=False)
        return filename
    
    def generate_html_report(self, data, title="516 Hackers OSINT Report"):
        """Generate HTML report"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{self.output_dir}/report_{timestamp}.html"
        
        html_content = f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{title}</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background: #2c3e50; color: white; padding: 20px; border-radius: 5px; }}
                .section {{ margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }}
                .found {{ color: #27ae60; }}
                .not-found {{ color: #e74c3c; }}
                table {{ width: 100%; border-collapse: collapse; }}
                th, td {{ padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üîç {title}</h1>
                <p>Generated by 516 Hackers OSINT Toolkit</p>
                <p>Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="section">
                <h2>üìä Summary</h2>
                <pre>{json.dumps(data.get('summary', {}), indent=2)}</pre>
            </div>
            
            <div class="section">
                <h2>üîç Detailed Results</h2>
                <pre>{json.dumps(data.get('results', {}), indent=2)}</pre>
            </div>
            
            <footer>
                <p><em>Report generated by 516 Hackers OSINT Toolkit</em></p>
            </footer>
        </body>
        </html>
        """
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return filename
    
    def export_multiple_formats(self, data, filename_prefix):
        """Export data in multiple formats"""
        results = {}
        
        results['json'] = self.export_json(data, filename_prefix)
        results['csv'] = self.export_csv(data, filename_prefix)
        results['html'] = self.generate_html_report(data)
        
        try:
            results['excel'] = self.export_excel(data, filename_prefix)
        except ImportError:
            print("‚ö†Ô∏è  Excel export requires openpyxl. Install with: pip install openpyxl")
        
        return results
